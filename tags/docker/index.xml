<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Developer Playground</title>
    <link>https://devplayg.com/tags/docker/</link>
    <description>Recent content in docker on Developer Playground</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 04 Nov 2019 09:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://devplayg.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating MariaDB Container</title>
      <link>https://devplayg.com/tech/docker_creating-mariadb-10.3-container/</link>
      <pubDate>Mon, 04 Nov 2019 09:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker_creating-mariadb-10.3-container/</guid>
      <description>https://hub.docker.com/_/mariadb
Write &amp;ldquo;docker-compose.yaml&amp;rdquo; file version: &#39;3&#39; services: db: image: mariadb:10.3 container_name: db volumes: - /data/mariadb/datadir:/var/lib/mysql - /data/mariadb/conf.d:/etc/mysql/conf.d environment: - MYSQL_ROOT_PASSWORD=Uniiot12!@ restart: unless-stopped ports: - &amp;quot;3306:3306&amp;quot; command: [&#39;mysqld&#39;, &#39;--character-set-server=utf8mb4&#39;, &#39;--collation-server=utf8mb4_unicode_ci&#39;]  Create the container docker-compose up -d  Set timezone cat &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot; | sudo tee /data/mariadb/conf.</description>
    </item>
    
    <item>
      <title>잠이 안와서 테스트 해 본 HLS 스트리밍</title>
      <link>https://devplayg.com/ai/streaming_hls/</link>
      <pubDate>Wed, 04 Sep 2019 01:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/ai/streaming_hls/</guid>
      <description>캐냐AA 커피원두가 도착했다. 밤 10시에 라떼를 한 잔 마셨더니 잠이 안온다. 그래서 HLS 스트리밍 테스트를 했는데, 잘 된다. 헐.
Step 1. 동영상 분할을 위한 FFmpeg 4.x 설치 $ apt-get install software-properties-common $ add-apt-repository ppa:jonathonf/ffmpeg-4 $ apt install ffmpeg $ ffmpeg -version $ apt install libfaac-dev  Step 2.</description>
    </item>
    
    <item>
      <title>4. Kafka 테스트</title>
      <link>https://devplayg.com/tech/kafka-on-docker_test/</link>
      <pubDate>Tue, 11 Jun 2019 19:55:12 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka-on-docker_test/</guid>
      <description>Kafka 상태확인 명령어 $ KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --list $ KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --describe --topic my-topic  Kafka 장애 발생 시, 상태변화 테스트 순차적 장애 발생 후, 순차적 복구
   Seq kafka1 kafka2 kafka3 설명     1 up up up 정상   2 up up down kafka3 장애 발생   3 up down down kafka2 장애 발생   4 up up down kafka2 장애 복구   5 up up up kafka3 장애 복구     Seq 1.</description>
    </item>
    
    <item>
      <title>Kafka tips</title>
      <link>https://devplayg.com/tech/kafka_tips/</link>
      <pubDate>Tue, 11 Jun 2019 18:55:12 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka_tips/</guid>
      <description>Create topic $KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --replication-factor 3 --partitions 5 --topic my-topic --create  List topics $KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --list  Describe topic $KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --describe --topic my-topic  Delete topic $KAFKA_HOME/bin/kafka-topics.</description>
    </item>
    
    <item>
      <title>3. Kafka 설정</title>
      <link>https://devplayg.com/tech/kafka-on-docker_setting-kafka/</link>
      <pubDate>Sun, 09 Jun 2019 18:55:12 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka-on-docker_setting-kafka/</guid>
      <description>Kafka 컨테이너 구성    호스트명 Broker ID IP     kafka1 1 172.17.0.5   kafka2 2 172.17.0.6   kafka3 3 172.17.0.7    컨테이너 개별 설정 디렉토리 생성</description>
    </item>
    
    <item>
      <title>2. Zookeeper 설정</title>
      <link>https://devplayg.com/tech/kafka-on-docker_setting-zookeepers/</link>
      <pubDate>Sun, 09 Jun 2019 15:55:12 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka-on-docker_setting-zookeepers/</guid>
      <description>Zookeeper 컨테이너 구성    호스트명 ID IP     zoo1 1 172.17.0.2   zoo2 2 172.17.0.3   zoo3 3 172.17.0.4    컨테이너 공통 설정 Zookeeper 설정 vi /kafka/config/zookeeper.</description>
    </item>
    
    <item>
      <title>Docker tips</title>
      <link>https://devplayg.com/tech/docker_tips/</link>
      <pubDate>Fri, 07 Jun 2019 00:28:15 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker_tips/</guid>
      <description>1. Containers Ubuntu 18.04 docker run -p 8000:8000 -v e:/gohome:/gohome -it --name test ubuntu bash  Apache 2.4 docker run -dit --name web -p 8080:80 -v E:/webhome/:/usr/local/apache2/htdocs/ httpd:2.4  MariaDB 10.</description>
    </item>
    
    <item>
      <title>1. Kafka 설치를 위한 Docker 환경구성</title>
      <link>https://devplayg.com/tech/kafka-on-docker_installation/</link>
      <pubDate>Thu, 06 Jun 2019 17:14:41 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka-on-docker_installation/</guid>
      <description>설치 버전  Docker Ubuntu 18.04
 Kafka 2.2 [Download] Zookeeper 3.4.13 OpenJDK 11.0.3
  Docker 컨테이너 구성    구분 호스트명 IP     Zookeeper zoo1 172.</description>
    </item>
    
  </channel>
</rss>