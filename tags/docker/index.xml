<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Developer Playground</title>
    <link>https://devplayg.com/tags/docker/</link>
    <description>Recent content in docker on Developer Playground</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 28 Jan 2022 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://devplayg.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>윈도우 Docker Desktop 대체</title>
      <link>https://devplayg.com/tech/install-dockerio-on-windows-10-wsl2/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/install-dockerio-on-windows-10-wsl2/</guid>
      <description>Microsoft Store 에서 Window Terminal 설치
 https://docs.microsoft.com/ko-kr/windows/terminal/install  WSL2 설치
wsl.exe --install dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart  Microsoft Store에서 Ubuntu 설치</description>
    </item>
    
    <item>
      <title>Setting up OpenLDAP on docker</title>
      <link>https://devplayg.com/tech/setting-up-openldap-on-docker/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/setting-up-openldap-on-docker/</guid>
      <description>docker run -p 389:389 -p 636:636 --name ldap --env LDAP_DOMAIN=&amp;quot;devplayg.com&amp;quot; --env LDAP_ORGANISATION=&amp;quot;Devplayg&amp;quot; --env LDAP_ADMIN_PASSWORD=grit --env LDAP_READONLY_USER_USERNAME=devplayg --env LDAP_READONLY_USER_PASSWORD=devplayg --detach osixia/openldap:1.4.0 docker exec ldap ldapsearch -x -H ldap://localhost -b dc=devplayg,dc=com -D &amp;quot;cn=admin,dc=devplayg,dc=com&amp;quot; -w grit  </description>
    </item>
    
    <item>
      <title>Setting up development environments with docker-compose</title>
      <link>https://devplayg.com/tech/config-dev-server-env-with-docker/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/config-dev-server-env-with-docker/</guid>
      <description>Create network docker network create -d bridge dev-net  Build environment docker-compose.yaml
networks: network1: name: dev-net services: db: image: mariadb:10.3 container_name: db volumes: - /d/data/mariadb/data:/var/lib/mysql - /d/data/mariadb/conf.d:/etc/mysql/conf.d environment: - MYSQL_ROOT_PASSWORD=devplayg12!</description>
    </item>
    
    <item>
      <title>JSON Tips</title>
      <link>https://devplayg.com/tech/json_handling/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/json_handling/</guid>
      <description>Minifier https://hub.docker.com/r/governmentpaas/json-minify
DockerFile
FROM ruby:2.7-alpine3.11 RUN gem install json-minify -v 0.0.2 --no-document  Build
docker build -t json-minify .  Minify
docker run --rm -v &amp;quot;%CD%&amp;quot;:/app json-minify ruby -rjson -e &amp;quot;puts JSON.</description>
    </item>
    
    <item>
      <title>Cannot start docker desktop on win 10 home 2004</title>
      <link>https://devplayg.com/tech/docker_fixing-bug-on-windows-10-2004/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker_fixing-bug-on-windows-10-2004/</guid>
      <description> 윈도우 버전 확인 winver  WSL 2 Linux 커널 업데이트 https://docs.microsoft.com/ko-KR/windows/wsl/wsl2-kernel
wsl -l -v
WSL 2 로 변환Link to WSL 2 로 변환  wsl --set-version Ubuntu 2  Default wsl --set-default Ubuntu  Remove docker Install docker </description>
    </item>
    
    <item>
      <title>MinIO 클러스터링 with Docker</title>
      <link>https://devplayg.com/tech/minio_clustering/</link>
      <pubDate>Sun, 24 May 2020 09:00:01 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/minio_clustering/</guid>
      <description>환경 구성 Docker 네트워크 생성 docker network create minio-network  멀티 MinIO 컨테이너 설정 및 시작 포트는 9001~9004;
docker run -p 9001:9000 --name minio1 --network minio-network -e &amp;quot;MINIO_ACCESS_KEY=devplayg&amp;quot; -e &amp;quot;MINIO_SECRET_KEY=devplayg12!</description>
    </item>
    
    <item>
      <title>Docker, Ubuntu 18.04에 설치하기</title>
      <link>https://devplayg.com/tech/docker_installation-on-ubuntu-18.04/</link>
      <pubDate>Sat, 23 May 2020 09:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker_installation-on-ubuntu-18.04/</guid>
      <description>https://docs.docker.com/engine/install/ubuntu/
Docker 설치 apt 패키지 업데이트
$ sudo apt-get update $ sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg-agent \ software-properties-common  Docker GPG 키 추가</description>
    </item>
    
    <item>
      <title>Installing and using CentOS 6.10 via Docker</title>
      <link>https://devplayg.com/tech/docker-container_centos-6.10/</link>
      <pubDate>Wed, 01 Jan 2020 18:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker-container_centos-6.10/</guid>
      <description>Pulling and run image in general
$ docker run -it --name c6 centos:6.10 bash  with sharing filesystem
$ docker run -it -v /host/dir:/container/dir --name c6 centos:6.10 bash  with binding container ports to the host</description>
    </item>
    
    <item>
      <title>Installing and using MariaDB 10.3 via Docker</title>
      <link>https://devplayg.com/tech/docker-container_mariadb-10.3/</link>
      <pubDate>Wed, 01 Jan 2020 18:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker-container_mariadb-10.3/</guid>
      <description>https://hub.docker.com/_/mariadb
Pulling and run image from command-line docker run --name db -e MYSQL_ROOT_PASSWORD=YOUR_PASSWORD -e TZ=Asia/Seoul -p 3306:3306 -d mariadb:10.3 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci   -e MYSQL_ROOT_PASSWORD=YOUR_PASSWORD -e TZ=Asia/Seoul -p 3306:3306 -d mariadb:10.</description>
    </item>
    
    <item>
      <title>Installing and using Ubuntu 18.04 via Docker</title>
      <link>https://devplayg.com/tech/docker_pulling-ubuntu-18.04/</link>
      <pubDate>Wed, 01 Jan 2020 18:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker_pulling-ubuntu-18.04/</guid>
      <description>Pulling and run image in general
docker run -it --name ubt ubuntu:18.04 bash  with sharing filesystem
docker run -it -v /host/dir:/container/dir --name ubt ubuntu:18.04 bash  with binding container ports to the host</description>
    </item>
    
    <item>
      <title>Installing and using other containers via Docker</title>
      <link>https://devplayg.com/tech/docker-container_etc/</link>
      <pubDate>Wed, 01 Jan 2020 18:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker-container_etc/</guid>
      <description> Pulling and run image Apache 2.4
docker run -dit --name web -p 8080:80 -v E:/webhome/:/usr/local/apache2/htdocs/ httpd:2.4  </description>
    </item>
    
    <item>
      <title>잠이 안와서 테스트 해 본 HLS 스트리밍</title>
      <link>https://devplayg.com/ai/streaming_hls/</link>
      <pubDate>Wed, 04 Sep 2019 01:00:00 +0900</pubDate>
      
      <guid>https://devplayg.com/ai/streaming_hls/</guid>
      <description>캐냐AA 커피원두가 도착했다. 밤 10시에 라떼를 한 잔 마셨더니 잠이 안온다. 그래서 HLS 스트리밍 테스트를 했는데, 잘 된다. 헐.
Step 1. 동영상 분할을 위한 FFmpeg 4.x 설치 $ apt-get install software-properties-common $ add-apt-repository ppa:jonathonf/ffmpeg-4 $ apt install ffmpeg $ ffmpeg -version $ apt install libfaac-dev  Step 2.</description>
    </item>
    
    <item>
      <title>4. Kafka 테스트</title>
      <link>https://devplayg.com/tech/kafka-on-docker_test/</link>
      <pubDate>Tue, 11 Jun 2019 19:55:12 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka-on-docker_test/</guid>
      <description>Kafka 상태확인 명령어 $ KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --list $ KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --describe --topic my-topic  Kafka 장애 발생 시, 상태변화 테스트 순차적 장애 발생 후, 순차적 복구
   Seq kafka1 kafka2 kafka3 설명     1 up up up 정상   2 up up down kafka3 장애 발생   3 up down down kafka2 장애 발생   4 up up down kafka2 장애 복구   5 up up up kafka3 장애 복구     Seq 1.</description>
    </item>
    
    <item>
      <title>Kafka tips</title>
      <link>https://devplayg.com/tech/kafka_tips/</link>
      <pubDate>Tue, 11 Jun 2019 18:55:12 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka_tips/</guid>
      <description>Create topic $KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --replication-factor 3 --partitions 5 --topic my-topic --create  List topics $KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --list  Describe topic $KAFKA_HOME/bin/kafka-topics.sh --bootstrap-server $KAFKA --describe --topic my-topic  Delete topic $KAFKA_HOME/bin/kafka-topics.</description>
    </item>
    
    <item>
      <title>3. Kafka 설정</title>
      <link>https://devplayg.com/tech/kafka-on-docker_setting-kafka/</link>
      <pubDate>Sun, 09 Jun 2019 18:55:12 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka-on-docker_setting-kafka/</guid>
      <description>Kafka 컨테이너 구성    호스트명 Broker ID IP     kafka1 1 172.17.0.5   kafka2 2 172.17.0.6   kafka3 3 172.17.0.7    컨테이너 개별 설정 디렉토리 생성</description>
    </item>
    
    <item>
      <title>2. Zookeeper 설정</title>
      <link>https://devplayg.com/tech/kafka-on-docker_setting-zookeepers/</link>
      <pubDate>Sun, 09 Jun 2019 15:55:12 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka-on-docker_setting-zookeepers/</guid>
      <description>Zookeeper 컨테이너 구성    호스트명 ID IP     zoo1 1 172.17.0.2   zoo2 2 172.17.0.3   zoo3 3 172.17.0.4    컨테이너 공통 설정 Zookeeper 설정 vi /kafka/config/zookeeper.</description>
    </item>
    
    <item>
      <title>Docker tips</title>
      <link>https://devplayg.com/tech/docker_tips/</link>
      <pubDate>Fri, 07 Jun 2019 00:28:15 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/docker_tips/</guid>
      <description>Commands docker info docker logs [name] docker exec -it [name] bash  My favorites on Windows Ubuntu 18.04
docker run -dit --name ubt -v e:/gohome:/gohome ubuntu:18.04 bash  OpenJDK 8</description>
    </item>
    
    <item>
      <title>1. Kafka 설치를 위한 Docker 환경구성</title>
      <link>https://devplayg.com/tech/kafka-on-docker_installation/</link>
      <pubDate>Thu, 06 Jun 2019 17:14:41 +0900</pubDate>
      
      <guid>https://devplayg.com/tech/kafka-on-docker_installation/</guid>
      <description>설치 버전  Docker Ubuntu 18.04
 Kafka 2.2 [Download] Zookeeper 3.4.13 OpenJDK 11.0.3
  Docker 컨테이너 구성    구분 호스트명 IP     Zookeeper zoo1 172.</description>
    </item>
    
  </channel>
</rss>